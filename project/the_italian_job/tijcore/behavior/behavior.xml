<root main_tree_to_execute="root">

    <BehaviorTree ID="root">
        <Sequence>
            <AlwaysSuccess />
        </Sequence>
    </BehaviorTree>

    <!--
        Does the pick and drop into the trash operation in two stages, locking and releasing access to the source and destination
        poses at separate times. This is the slowest version of the operation, but works well when source and destination
        are far away from eachother.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndDropInTrashInTwoStages">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickAndDropInTrashInTwoStages" />
                <Sequence>
                    <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                    <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeAroundTarget" target_pose="source_locus_pose" />
                    <SubTree task_parameters="task_parameters" ID="PickPartFromSourceLocus" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                    <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
                </Sequence>
                <Sequence>
                    <GetDropBucketPose task_parameters="{task_parameters}" drop_bucket_pose="{drop_bucket_pose}" />
                    <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeAroundTarget" target_pose="drop_bucket_pose" />
                    <SubTree task_parameters="task_parameters" ID="DropPartInTrashBin" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                    <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
                </Sequence>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Does the pick and drop into the trash operation in a single stage, locking both start an end poses for the whole duration
        of the operation. This allows not to have to move away and back in the arm from the work area, but prevents the other
        arm from getting in for the duration of the task. This is faster than the two stage version, but only worth if both
        poses are close to eachother.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndDropInTrashInOneStage">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickAndDropInTrashInOneStage" />
                <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                <GetDropBucketPose task_parameters="{task_parameters}" drop_bucket_pose="{drop_bucket_pose}" />
                <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeBetweenStartAndEndPoses" start_pose="source_locus_pose" end_pose="drop_bucket_pose" />
                <SubTree task_parameters="task_parameters" ID="PickPartFromSourceLocusQuick" />
                <SubTree task_parameters="task_parameters" ID="DropPartInTrashBinQuick" />
                <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Does the pick and place operation in two stages, locking and releasing access to the source and destination
        poses at separate times. This is the slowest version of the operation, but works well when source and destination
        are far away from eachother.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndPlacePartInTwoStages">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickAndPlacePartInTwoStages" />
                <Sequence>
                    <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                    <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeAroundTarget" target_pose="source_locus_pose" />
                    <SubTree task_parameters="task_parameters" ID="PickPartFromSourceLocus" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                    <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
                </Sequence>
                <Sequence>
                    <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                    <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeAroundTarget" target_pose="destination_locus_pose" />
                    <SubTree task_parameters="task_parameters" ID="ManeuvePartIntoDestiantionPose" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                    <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
                </Sequence>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Does the pick and place operation in a single stage, locking both start an end poses for the whole duration
        of the operation. This allows not to have to move away and back in the arm from the work area, but prevents the other
        arm from getting in for the duration of the task. This is faster than the two stage version, but only worth if both
        poses are close to eachother.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndPlacePartInOneStage">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickAndPlacePartInOneStage" />
                <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GetExclusiveAccessToVolumeBetweenStartAndEndPoses" start_pose="source_locus_pose" end_pose="destination_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="PickPartFromSourceLocusQuick" />
                <SubTree task_parameters="task_parameters" ID="ManeuvePartIntoDestiantionPose" />
                <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Depending on the distance between the source and destination poses, this branch will select the appropriate
        pick and place operation between the fast and the slow version.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="SelectQuickOrSlowPickAndPlace">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="SelectQuickOrSlowPickAndPlace" />
                <IfThenElse>
                    <Sequence>
                        <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                        <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                        <PosesAreWithinRange task_parameters="{task_parameters}" max_range="3" start_pose="{source_locus_pose}" end_pose="{destination_locus_pose}" />
                    </Sequence>
                    <SubTree task_parameters="task_parameters" ID="PickAndPlacePartInOneStage" />
                    <SubTree task_parameters="task_parameters" ID="PickAndPlacePartInTwoStages" />
                </IfThenElse>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Depending on the distance between the source and tash bucket poses, this branch will select the appropriate
        pick and place operation between the fast and the slow version.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="SelectQuickOrSlowPickAndDrop">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="SelectQuickOrSlowPickAndDrop" />
                <IfThenElse>
                    <Sequence>
                        <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                        <GetDropBucketPose task_parameters="{task_parameters}" drop_bucket_pose="{drop_bucket_pose}" />
                        <PosesAreWithinRange task_parameters="{task_parameters}" max_range="3" start_pose="{source_locus_pose}" end_pose="{drop_bucket_pose}" />
                    </Sequence>
                    <SubTree task_parameters="task_parameters" ID="PickAndDropInTrashInOneStage" />
                    <SubTree task_parameters="task_parameters" ID="PickAndDropInTrashInTwoStages" />
                </IfThenElse>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Root of the branch that performs the RemoveBrokenpart task.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="RemoveBrokenPartTaskRoot">
        <TraceLoggerDecorator>
            <Fallback>
                <Sequence>
                    <LogInfo message="RemoveBrokenPartTaskRoot" />
                    <SubTree task_parameters="task_parameters" ID="SelectPartGripperTool" />
                    <SubTree task_parameters="task_parameters" ID="SelectQuickOrSlowPickAndDrop" />
                    <DestroyPartAtSource task_parameters="{task_parameters}" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                </Sequence>
                <SubTree task_parameters="task_parameters" ID="PeformFailureExitRecovery" />
            </Fallback>
        </TraceLoggerDecorator>
    </BehaviorTree>


    <!--
        Root of the branch that performs the PickAndPlacePart task.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndPlacePartRoot">
        <TraceLoggerDecorator>
            <Fallback>
                <Sequence>
                    <LogInfo message="PickAndPlacePartRoot" />
                    <SubTree task_parameters="task_parameters" ID="SelectPartGripperTool" />
                    <SubTree task_parameters="task_parameters" ID="SelectQuickOrSlowPickAndPlace" />
                    <SwapSourceAndDestinationLoci task_parameters="{task_parameters}" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                </Sequence>
                <SubTree task_parameters="task_parameters" ID="PeformFailureExitRecovery" />
            </Fallback>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Root of the branch that performs the PickAndPlaceMovableTray task.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="PickAndPlaceMovableTrayRoot">
        <TraceLoggerDecorator>
            <Fallback>
                <Sequence>
                    <LogInfo message="PickAndPlaceMovableTrayRoot" />
                    <SubTree task_parameters="task_parameters" ID="SelectMovableTrayPartGripperTool" />
                    <SubTree task_parameters="task_parameters" ID="SelectQuickOrSlowPickAndPlace" />
                    <SwapSourceAndDestinationLoci task_parameters="{task_parameters}" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePoseIfNeccessary" />
                    <LockMovableTrayInAGV task_parameters="{task_parameters}" />
                </Sequence>
                <SubTree task_parameters="task_parameters" ID="PeformFailureExitRecovery" />
            </Fallback>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Check if the tool currently set in the robot is gripper_part. If it's not, goes to the tool table and switches the current tool type.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="SelectPartGripperTool">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="SelectPartGripperTool" />
                <GetRobotGripperToolType task_parameters="{task_parameters}" gripper_tool_type="{gripper_tool_type}" />
                <SetBlackboard output_key="desired_tool_type" value="gripper_part" />
                <Fallback>
                    <ToolTypesAreTheSame left_hand_side="{gripper_tool_type}" right_hand_side="{desired_tool_type}" />
                    <SubTree task_parameters="task_parameters" ID="GoToToolTableAndSetToolTo" tool_type="desired_tool_type" />
                </Fallback>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Check if the tool currently set in the robot is gripper_tray. If it's not, goes to the tool table and switches the current tool type.
        Parameters: task_parameters
    -->
    <BehaviorTree ID="SelectMovableTrayPartGripperTool">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="SelectMovableTrayPartGripperTool" />
                <GetRobotGripperToolType task_parameters="{task_parameters}" gripper_tool_type="{gripper_tool_type}" />
                <SetBlackboard output_key="desired_tool_type" value="gripper_tray" />
                <Fallback>
                    <ToolTypesAreTheSame left_hand_side="{gripper_tool_type}" right_hand_side="{desired_tool_type}" />
                    <SubTree task_parameters="task_parameters" ID="GoToToolTableAndSetToolTo" tool_type="desired_tool_type" />
                </Fallback>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Goes to the tool table and switches the current tool type to the desired tool type.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            tool_type (GripperTypeId): The desired tool type.
    -->
    <BehaviorTree ID="GoToToolTableAndSetToolTo">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GoToToolTableAndSetToolTo" />
                <GetToolTablePose task_parameters="{task_parameters}" tool_table_pose="{tool_table_pose}" />
                <GetRobotTo2DPose task_parameters="{task_parameters}" target_pose="{tool_table_pose}" />
                <SetRobotGripperToolType task_parameters="{task_parameters}" gripper_tool_type="{tool_type}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Navigates to the proximities of the src_pose task parameter and picks the part at the pose indicated by the src_locus task parameter.
        This also assumes that the robot is NOT currently holding a part and that the collistion envelope is not set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="PickPartFromSourceLocus">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickPartFromSourceLocus" />
                <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GoToTargetsHintPose" target_pose="source_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="TryPickingItemUp" target_pose="source_locus_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Picks the part at the pose indicated by the src_locus task parameter without removing the arm afterward to
        avoid extra time. This also assumes that the robot is NOT currently holding a part and that the collistion
        envelope is not set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="PickPartFromSourceLocusQuick">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PickPartFromSourceLocusQuick" />
                <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GoToTargetsHintPose" target_pose="source_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="TryPickingItemUp" target_pose="source_locus_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Assuming that the robot is close ot the target, it tries to pick up the part at the target_pose.
        This also assumes that the robot is NOT currently holding a part and that the collistion envelope is NOT set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): The target pose from which the robot should pick up the part.
    -->
    <BehaviorTree ID="TryPickingItemUp">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryPickingItemUp" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="target_pose" />
                <SubTree task_parameters="task_parameters" ID="GraspPartAtTargetPose" target_pose="target_pose" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="target_pose" />
                <SubTree task_parameters="task_parameters" ID="SetupCollisionEnvelope" target_pose="target_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Navigates to the proximities of the dst_pose task parameter and places the part currently held by the robot in the gripper.
        This also assumes that the robot is currently holding the part and that the collistion envelope is set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="PlacePartAtDestinationLocusFromAbove">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PlacePartAtDestinationLocusFromAbove" />
                <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GoToTargetsHintPose" target_pose="destination_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="TryPlacingPartFromAboveWithRetry" target_pose="destination_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="destination_locus_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Assuming that the gripper is located at the vertical landing pose, it tries to place the part from above by getting within
        drop height and then letting go of the part. This assumes that the robot is currently holding the part, the gripper is at
        the landing pose, and that the collision envelope is set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): The target pose to which the robot should place the part.
    -->
    <BehaviorTree ID="DropPartInTargetPose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="DropPartInTargetPose" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                <CalculateVerticalDropPose task_parameters="{task_parameters}" target_pose="{target_pose}" offset_to_top="{offset_to_top}" end_effector_pose="{end_effector_pose}" />
                <GetGripperIn3DPoseCartesianSpace task_parameters="{task_parameters}" target_pose="{end_effector_pose}" />
                <GetRobotGripperOff task_parameters="{task_parameters}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Assuming that the robot is close ot the target, it tries to place the part at the target_pose.
        This also assumes that the robot is currently holding the part and that the collistion envelope is set.
        Parameters:
        task_parameters (TaskParameters): The task parameters structure.
        target_pose (Pose): The target pose to which the robot should place the part.
    -->
    <BehaviorTree ID="TryPlacingPartFromAbove">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryPlacingPartFromAbove" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="target_pose" />
                <SubTree task_parameters="task_parameters" ID="DropPartInTargetPose" target_pose="target_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Same as TryPlacingPartFromAbove, but with doing a retry from a slightly different pose if the operation fails.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): The target pose to which the robot should place the part.
    -->
    <BehaviorTree ID="TryPlacingPartFromAboveWithRetry">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryPlacingPartFromAboveWithRetry" />
                <RetryUntilSuccessful num_attempts="5">
                    <Fallback>
                        <SubTree task_parameters="task_parameters" ID="TryPlacingPartFromAbove" target_pose="target_pose" />
                        <ForceFailure>
                            <SubTree task_parameters="task_parameters" ID="GoToRandomPoseNearPose" target_pose="target_pose" />
                        </ForceFailure>
                    </Fallback>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Navigates to the proximities of the trash bucket and drops the part currently held by the robot in it.
        This also assumes that the robot is currently holding the part and that the collistion envelope is set.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="DropPartInTrashBin">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="DropPartInTrashBin" />
                <GetDropBucketPose task_parameters="{task_parameters}" drop_bucket_pose="{drop_bucket_pose}" />
                <GetRobotInSafePoseNearTarget task_parameters="{task_parameters}" target_pose="{drop_bucket_pose}" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="drop_bucket_pose" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <GetRobotGripperOff task_parameters="{task_parameters}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Drops the part currently held by the robot in the bucket, without navigating towards it first to avoid extra time.
        This also assumes that the robot is currently holding the part and that the collistion envelope is set, and that we
        are close enough to the bucket in the first place.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="DropPartInTrashBinQuick">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="DropPartInTrashBinQuick" />
                <GetDropBucketPose task_parameters="{task_parameters}" drop_bucket_pose="{drop_bucket_pose}" />
                <SubTree task_parameters="task_parameters" ID="RotateTowardsGoalInPlace" target_pose="drop_bucket_pose" />
                <SubTree task_parameters="task_parameters" ID="GetInVerticalLandingPoseInJointSpace" target_pose="drop_bucket_pose" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <GetRobotGripperOff task_parameters="{task_parameters}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Navigates the robot to some pose close to the target_pose. A random displacement will be added to this target pose,
        the allow for resilient recovery if higher level behaviors fail.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): The target pose the robot should navigate to.
    -->
    <BehaviorTree ID="GoToRandomPoseNearPose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GoToRandomPoseNearPose" />
                <RetryUntilSuccessful num_attempts="5">
                    <Sequence>
                        <RandomizeTargetPose task_parameters="{task_parameters}" max_radius="1.5" target_pose="{target_pose}" randomized_target_pose="{randomized_target_pose}" />
                        <RotateRobotToFaceTarget task_parameters="{task_parameters}" target_pose="{randomized_target_pose}" aim_target_pose="{target_pose}" />
                    </Sequence>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="GraspPartAtTargetPose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GraspPartAtTargetPose" />
                <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                <CalculateVerticalGripEndEffectorPose task_parameters="{task_parameters}" target_pose="{target_pose}" offset_to_top="{offset_to_top}" end_effector_pose="{end_effector_pose}" />
                <ContactPartFromAboveAndGrasp task_parameters="{task_parameters}" target_pose="{end_effector_pose}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Turns on the collision envelope for the robot, after calculating the envelope and relative transform.
        TODO(glpuga): target_pose should not need to be a parameter here.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): The target pose from which the robot should pick up the part.
    -->
    <BehaviorTree ID="SetupCollisionEnvelope">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="SetupCollisionEnvelope" />
                <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                <CalculateVerticalGripEndEffectorPose task_parameters="{task_parameters}" target_pose="{target_pose}" offset_to_top="{offset_to_top}" end_effector_pose="{end_effector_pose}" />
                <CalculatePayloadIntoEndEffectorTransform task_parameters="{task_parameters}" end_effector_pose="{end_effector_pose}" payload_pose="{target_pose}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" />
                <SetRobotGripperPayloadEnvelope task_parameters="{task_parameters}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" payload_envelope="{payload_envelope}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Assuming the robot is close to the target pose, it places the gripper in the vertical landing pose calculated from the target pose.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): Target pose from which the robot calculates the vertical landing pose.
    -->
    <BehaviorTree ID="GetInVerticalLandingPoseInJointSpace">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GetInVerticalLandingPoseInJointSpace" />
                <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                <CalculateVerticalLandingPose task_parameters="{task_parameters}" target_pose="{target_pose}" offset_to_top="{offset_to_top}" vertical_landing_pose="{vertical_landing_pose}" />
                <GetGripperIn3DPoseJoinSpace task_parameters="{task_parameters}" target_pose="{vertical_landing_pose}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Locks access to a spherical volume around the target pose.
        If it cant get exclusive access right away, it tries to move the robot to a safe pose near the target pose.
        TODO(glpuga) its arguable that this this subtree should only concern itself with acquiring access, and not with moving.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            target_pose (Pose): Center of the spherical volume to close access to.
    -->
    <BehaviorTree ID="GetExclusiveAccessToVolumeAroundTarget">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GetExclusiveAccessToVolumeAroundTarget" />
                <RetryUntilSuccessful num_attempts="-1">
                    <Fallback>
                        <LockAccessToVolumeAtPose task_parameters="{task_parameters}" radius="0.5" target_pose="{target_pose}" />
                        <ForceFailure>
                            <Sequence>
                                <GetRobotInSafePoseNearTarget task_parameters="{task_parameters}" target_pose="{target_pose}" />
                                <SubTree ID="SleepAFewMilliseconds" />
                            </Sequence>
                        </ForceFailure>
                    </Fallback>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Locks access to a spherical volume around both poses and the cilinder that connects them.
        If it cant get exclusive access right away, it tries to move the robot to a safe pose near the start_pose.
        TODO(glpuga) its arguable that this this subtree should only concern itself with acquiring access, and not with moving.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            start_pose (Pose): Center of the spherical volume of the first end of the tunnel to close access to.
            end_pose (Pose): Center of the spherical volume of the second end of the tunnel to close access to.
    -->
    <BehaviorTree ID="GetExclusiveAccessToVolumeBetweenStartAndEndPoses">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GetExclusiveAccessToVolumeBetweenStartAndEndPoses" />
                <RetryUntilSuccessful num_attempts="-1">
                    <Fallback>
                        <LockAccessToVolumeBetweenPoses task_parameters="{task_parameters}" radius="0.5" start_pose="{start_pose}" end_pose="{end_pose}" />
                        <ForceFailure>
                            <Sequence>
                                <GetRobotInSafePoseNearTarget task_parameters="{task_parameters}" target_pose="{start_pose}" />
                                <SubTree ID="SleepAFewMilliseconds" />
                            </Sequence>
                        </ForceFailure>
                    </Fallback>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <!--
        Release access to a space volume whose handle is stored in the task_parameters structure.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
    -->
    <BehaviorTree ID="ReleaseExclusiveAccessToVolume">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="ReleaseExclusiveAccessToVolume" />
                <ReleaseAccessToLockedVolume task_parameters="{task_parameters}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="SleepAFewMilliseconds">
        <Delay delay_msec="100">
            <AlwaysSuccess />
        </Delay>
    </BehaviorTree>

    <!--
        Clears up the state of the robot arm when exiting form a failure situation, to leave the arm ready for a new tas.
        Parameters:
            task_parameters (TaskParameters): The task parameters structure.
            tool_type (GripperTypeId): The desired tool type.
    -->
    <BehaviorTree ID="PeformFailureExitRecovery">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PeformFailureExitRecovery" />
                <GetRobotGripperOff task_parameters="{task_parameters}" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePose" />
                <!-- finally release access to the space if we are still holding it -->
                <SubTree task_parameters="task_parameters" ID="ReleaseExclusiveAccessToVolume" />
                <SubTree ID="SleepAFewMilliseconds" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="GetRobotInClosestSafePose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GetRobotInClosestSafePose" />
                <GetCurrentRobotPose task_parameters="{task_parameters}" robot_pose="{robot_pose}" />
                <GetRobotInSafePoseNearTarget task_parameters="{task_parameters}" target_pose="{robot_pose}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>


    <BehaviorTree ID="RotateTowardsGoalInPlace">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="RotateTowardsGoalInPlace" />
                <GetCurrentRobotPose task_parameters="{task_parameters}" robot_pose="{robot_pose}" />
                <RotateRobotToFaceTarget task_parameters="{task_parameters}" target_pose="{robot_pose}" aim_target_pose="{target_pose}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="GoToTargetsHintPose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GoToTargetsHintPose" />
                <FindClosesHintPoseForTarget task_parameters="{task_parameters}" target_pose="{target_pose}" hint_pose="{hint_pose}" />
                <RandomizeTargetPose task_parameters="{task_parameters}" max_radius="0.03" target_pose="{hint_pose}" randomized_target_pose="{randomized_target_pose}" />
                <RotateRobotToFaceTarget task_parameters="{task_parameters}" target_pose="{randomized_target_pose}" aim_target_pose="{target_pose}" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>


    <BehaviorTree ID="GetRobotInClosestSafePoseIfNeccessary">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="GetRobotInClosestSafePoseIfNeccessary" />
                <IfThenElse>
                    <WeAreInASharedWorkspace task_parameters="{task_parameters}" />
                    <SubTree task_parameters="task_parameters" ID="GetRobotInClosestSafePose" />
                    <AlwaysSuccess />
                </IfThenElse>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>


    <BehaviorTree ID="ManeuvePartIntoDestiantionPose">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="ManeuvePartIntoDestiantionPose" />
                <IfThenElse>
                    <ManeouverTypeIs task_parameters="{task_parameters}" type="SensorAssembly" />
                    <SubTree task_parameters="task_parameters" ID="PlacePartAtDestinationLocusAsSensorAssembly" />
                    <Sequence>
                        <IfThenElse>
                            <ManeouverTypeIs task_parameters="{task_parameters}" type="RegulatorAssembly" />
                            <SubTree task_parameters="task_parameters" ID="PlacePartAtDestinationLocusAsRegulatorAssembly" />
                            <Sequence>
                                <IfThenElse>
                                    <ManeouverTypeIs task_parameters="{task_parameters}" type="PlaceFromAbove" />
                                    <SubTree task_parameters="task_parameters" ID="PlacePartAtDestinationLocusFromAbove" />
                                    <AlwaysFailure /> <!-- indicate an error -->
                                </IfThenElse>
                            </Sequence>
                        </IfThenElse>
                    </Sequence>
                </IfThenElse>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="PlacePartAtDestinationLocusAsRegulatorAssembly">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PlacePartAtDestinationLocusAsRegulatorAssembly" />
                <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GoToTargetsHintPose" target_pose="destination_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="TryPlacingRegulatorAssemblyWithRetry" target_pose="destination_locus_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="TryPlacingRegulatorAssemblyWithRetry">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryPlacingRegulatorAssemblyWithRetry" />
                <RetryUntilSuccessful num_attempts="5">
                    <Fallback>
                        <SubTree task_parameters="task_parameters" ID="TryPlacingRegulatorAssembly" target_pose="target_pose" />
                        <ForceFailure>
                            <SubTree task_parameters="task_parameters" ID="GoToRandomPoseNearPose" target_pose="target_pose" />
                        </ForceFailure>
                    </Fallback>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="TryPlacingRegulatorAssembly">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryPlacingRegulatorAssembly" />
                <Sequence>
                    <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                    <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                    <CalculateVerticalGripEndEffectorPose task_parameters="{task_parameters}" target_pose="{source_locus_pose}" offset_to_top="{offset_to_top}" end_effector_pose="{source_end_effector_pose}" />
                    <CalculatePayloadIntoEndEffectorTransform task_parameters="{task_parameters}" end_effector_pose="{source_end_effector_pose}" payload_pose="{source_locus_pose}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" />
                    <CalculateEndEffectorPoseFromPayloadPose payload_pose="{target_pose}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" end_effector_pose="{dst_end_effector_pose}" />
                </Sequence>
                <CalculateRegulatorPreInsertAndInsertPoses task_parameters="{task_parameters}" target_pose="{dst_end_effector_pose}" pre_insert_pose="{pre_insert_pose}" insert_pose="{insert_pose}" gripper_exit_pose="gripper_exit_pose" />
                <GetGripperIn3DPoseJoinSpace task_parameters="{task_parameters}" target_pose="{pre_insert_pose}" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <ForceSuccess>
                    <GetGripperIn3DPoseJoinSpace task_parameters="{task_parameters}" target_pose="{insert_pose}" />
                </ForceSuccess>
                <Delay delay_msec="1000">
                    <AlwaysSuccess />
                </Delay>
                <GetRobotGripperOff task_parameters="{task_parameters}" />
                <ForceSuccess>
                    <GetGripperIn3DPoseCartesianSpace task_parameters="{task_parameters}" target_pose="{gripper_exit_pose}" />
                </ForceSuccess>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>


    <BehaviorTree ID="PlacePartAtDestinationLocusAsSensorAssembly">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="PlacePartAtDestinationLocusAsSensorAssembly" />
                <GetDestinationLocusRelativePose task_parameters="{task_parameters}" destination_locus_pose="{destination_locus_pose}" />
                <SubTree task_parameters="task_parameters" ID="GoToTargetsHintPose" target_pose="destination_locus_pose" />
                <SubTree task_parameters="task_parameters" ID="TryInsertingSensorFromFrontWithRetry" target_pose="destination_locus_pose" />
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="TryInsertingSensorFromFrontWithRetry">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryInsertingSensorFromFrontWithRetry" />
                <RetryUntilSuccessful num_attempts="5">
                    <Fallback>
                        <SubTree task_parameters="task_parameters" ID="TryInsertingSensorFromFront" target_pose="target_pose" />
                        <ForceFailure>
                            <SubTree task_parameters="task_parameters" ID="GoToRandomPoseNearPose" target_pose="target_pose" />
                        </ForceFailure>
                    </Fallback>
                </RetryUntilSuccessful>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

    <BehaviorTree ID="TryInsertingSensorFromFront">
        <TraceLoggerDecorator>
            <Sequence>
                <LogInfo message="TryInsertingSensorFromFront" />
                <Sequence>
                    <GetSourceLocusRelativePose task_parameters="{task_parameters}" source_locus_pose="{source_locus_pose}" />
                    <CalculateEnvelopeAndOffsetForVerticalPickUp task_parameters="{task_parameters}" offset_to_top="{offset_to_top}" payload_envelope="{payload_envelope}" />
                    <CalculateVerticalGripEndEffectorPose task_parameters="{task_parameters}" target_pose="{source_locus_pose}" offset_to_top="{offset_to_top}" end_effector_pose="{source_end_effector_pose}" />
                    <CalculatePayloadIntoEndEffectorTransform task_parameters="{task_parameters}" end_effector_pose="{source_end_effector_pose}" payload_pose="{source_locus_pose}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" />
                    <CalculateEndEffectorPoseFromPayloadPose payload_pose="{target_pose}" payload_into_end_effector_transform="{payload_into_end_effector_transform}" end_effector_pose="{dst_end_effector_pose}" />
                </Sequence>
                <CalculateSensorPreInsertAndInsertPoses task_parameters="{task_parameters}" target_pose="{dst_end_effector_pose}" pre_insert_pose="{pre_insert_pose}" insert_pose="{insert_pose}" gripper_exit_pose="{gripper_exit_pose}" />
                <GetGripperIn3DPoseJoinSpace task_parameters="{task_parameters}" target_pose="{pre_insert_pose}" />
                <RemoveRobotGripperPayloadEnvelope task_parameters="{task_parameters}" />
                <ForceSuccess>
                    <GetGripperIn3DPoseCartesianSpace task_parameters="{task_parameters}" target_pose="{insert_pose}" />
                </ForceSuccess>
                <Delay delay_msec="1000">
                    <AlwaysSuccess />
                </Delay>
                <GetRobotGripperOff task_parameters="{task_parameters}" />
                <ForceSuccess>
                    <GetGripperIn3DPoseCartesianSpace task_parameters="{task_parameters}" target_pose="{gripper_exit_pose}" />
                </ForceSuccess>
            </Sequence>
        </TraceLoggerDecorator>
    </BehaviorTree>

</root>